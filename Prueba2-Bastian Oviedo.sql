--VARIABLES BIND 
VARIABLE B_FECHA_ANIO VARCHAR2(4);
VARIABLE B_FECHA_MES VARCHAR2(2); 
VARIABLE B_ARRIENDO NUMBER; 
VARIABLE B_ADICION_15 NUMBER; 

--SE ASIGNAN LOS VALORES A LAS VARIABLES BIND
 EXEC :B_FECHA_ANIO := TO_CHAR(SYSDATE,'YYYY');
 EXEC :B_FECHA_MES := TO_CHAR(SYSDATE,'MM');
 EXEC :B_ARRIENDO := 10000000; 
 EXEC :B_ADICION_15 := 15;
 
--DECLARACIÓN DEL BLOQUE ANÓNIMO
DECLARE
  --DECLARACION DEL PRIMER CURSOR DONDE SE RECORRERA LA INFORMACION DEL CENTRO DE DISTRIBUCION
  CURSOR CUR_CENTRO IS
  SELECT DISTINCT CODIGO, NOMBRE, DIRECCION, LARGO, ANCHO 
  FROM CENTRO_DISTRIBUCION ;
  
  --DECLARACION DE TIPO REGISTRO DEL CURSOR
  TYPE T_CENTRO IS RECORD (
    CODIGO    CENTRO_DISTRIBUCION.CODIGO%TYPE,
    NOMBRE    CENTRO_DISTRIBUCION.NOMBRE%TYPE,
    DIRECCION CENTRO_DISTRIBUCION.DIRECCION%TYPE,
    LARGO     CENTRO_DISTRIBUCION.LARGO%TYPE,
    ANCHO     CENTRO_DISTRIBUCION.ANCHO%TYPE
  );
  
  --DECLARACION DEL SEGUNDO CURSOR DONDE SE RECORRERA LA INFORMACION DE PRODUCTO
  --TOMA POR PARAMETRO EL ID DEL CENTRO DE DISTRIBUCION DEL PRIMER CURSOR
  CURSOR CUR_PRODUCTO(P_CODIGO VARCHAR2) IS 
    SELECT DISTINCT CODIGO, NOMBRE, PRECIO_COMPRA,
           PAIS_ORIGEN, STOCK, CENTRO_DISTRIBUCION_CODIGO
    FROM PRODUCTO
    WHERE CENTRO_DISTRIBUCION_CODIGO = P_CODIGO;
  
    --DECLARACION DE TIPO REGISTRO DEL CURSOR
    TYPE T_PRODUCTO IS RECORD (
      CODIGO        PRODUCTO.CODIGO%TYPE, 
      NOMBRE        PRODUCTO.NOMBRE%TYPE, 
      PRECIO_COMPRA PRODUCTO.PRECIO_COMPRA%TYPE,          
      PAIS_ORIGEN   PRODUCTO.PAIS_ORIGEN%TYPE, 
      STOCK         PRODUCTO.STOCK%TYPE, 
      CENTRO_DISTRIBUCION_CODIGO PRODUCTO.CENTRO_DISTRIBUCION_CODIGO%TYPE
    );
  
  --DECLARACION DE VARRAY DE TAMAÑO 3
    TYPE T_ARREGLO IS VARRAY(3) OF NUMBER;
    
    --DECLARACIÓN DE VARIABLES QUE ALOJAN A LOS CURSORES CON SU TIPO DE DATO
    V_CENTRO T_CENTRO;
    V_PRODUCTO T_PRODUCTO;
    
    --DECLARACION DE VARIABLE EN LA QUE SE ENCUENTRA EL ARREGLO
    V_ARREGLO T_ARREGLO;
  
    
    --DECLARACIÓN DE VARIABLES QUE SE USARAN PARA LOS CÁLCULOS Y OTROS DATOS 
    V_STOCK_TOTAL NUMBER;
    V_COSTO_OP NUMBER;
    V_AREA_CENTRO NUMBER;
    V_VALOR_AREA NUMBER;
    V_PRECIO_COMPRA_IVA NUMBER;
    V_IVA NUMBER;
    V_PORCENTAJE_PAIS NUMBER;
    V_PRECIO_COMPRA_IVA_PAIS NUMBER;
    V_PRECIO_VENTA NUMBER;
    V_PROD_VENDIDOS NUMBER;
    V_DESC_OFERTA NUMBER;
    V_PRECIO_OFERTA NUMBER;
    V_DESC NUMBER;
    V_PROYECCION_STOCK NUMBER;
    V_STOCK_PROYECCION NUMBER;
    V_MAS_VENDIDO NUMBER;
    V_PRECIO_STOCK_PROY NUMBER;
    V_PRECIO_FINAL NUMBER;
    
    V_ADICIONAL_VENDIDO NUMBER;
    
    
--EMPIEZA EL PROCESO DE EJECUCIÓN DEL BLOQUE ANÓNIMO
BEGIN
  --SE ASIGNAN LOS VALORES DE CADA POSICION DEL ARREGLO
    V_ARREGLO := T_ARREGLO(0.30, 1000, 300000);
   
  --SE HACE TRUNCATE A LAS TABLAS EN TIEMPO DE EJECUCION PARA QUE NO HAYA ERROR POR ID DUPLICADO AL HACER INSERT
    EXECUTE IMMEDIATE('TRUNCATE TABLE CENTRO_DISTRIBUCION_MENSUAL');
    EXECUTE IMMEDIATE('TRUNCATE TABLE PRODUCTO_MENSUAL ');
    EXECUTE IMMEDIATE('TRUNCATE TABLE ERROR_PROCESO');

  OPEN CUR_CENTRO; --SE ABRE EL PRIMER CURSOR 
    LOOP  --SE INICIA EL CICLO
      FETCH CUR_CENTRO INTO V_CENTRO; --SE CARGAN TODOS LOS DATOS DEL CURSOR A LA VARIABLE 
      EXIT WHEN CUR_CENTRO%NOTFOUND; --EXCEPCION: CUANDO NO ENCUENTRA DATOS, EL CICLO SE CIERRA
      
        --OPERACIONES PARA TABLA CENTRO_DISTRIBUCION_MENSUAL
          --COSTO OPERACIONES
          --SE EXTRAE EL STOCK TOTAL DE PRODUCTOS POR CADA CENTRO DE DISTRIBUCION
            SELECT SUM(PRO.STOCK)
            INTO V_STOCK_TOTAL
            FROM CENTRO_DISTRIBUCION CD
            JOIN PRODUCTO PRO ON CD.CODIGO = PRO.CENTRO_DISTRIBUCION_CODIGO
            WHERE CD.CODIGO = V_CENTRO.CODIGO
            GROUP BY CD.CODIGO;  
            
            --SE HACE EL CALCULO DEL COSTO DE OPERACIONES POR CADA CENTRO DE DISTRIBUCION
            V_COSTO_OP := ROUND((V_STOCK_TOTAL * V_ARREGLO(1)) * V_ARREGLO(2));
  
            --COSTOS DE MANTENCION
            BEGIN
              --SE CALCULA EL AREA DE CADA CENTRO DE DISTRIBUCION
              V_AREA_CENTRO := ROUND(V_CENTRO.LARGO * V_CENTRO.ANCHO);
              
              --SE EXTRAE EL VALOR SEGUN EL AREA DENTRO DEL RANGO CORRESPONDIENTE 
              SELECT VALOR
              INTO V_VALOR_AREA
              FROM AREA_MANTENCION
              WHERE AREA_MIN <= V_AREA_CENTRO AND AREA_MAX >= V_AREA_CENTRO;
              
              --IF V_AREA_CENTRO > V_ARREGLO(3) THEN 
                --V_VALOR_AREA := ROUND(V_VALOR_AREA * 2);
              --END IF;
            
              EXCEPTION
              --CUANDO NO EXISTAN DATOS ENTONCES SE EJECUTARA LA EXCEPCION Y SE INSERTARA EL ERROR EN LA TABLA DE ERRORES
                WHEN NO_DATA_FOUND THEN
                  V_VALOR_AREA := 1200000;
                
                  INSERT INTO ERROR_PROCESO VALUES (
                    SEQ_ERROR_PROCESO.NEXTVAL,
                    'CÁLCULO DE ÁREA PARA CENTRO: ' || V_CENTRO.CODIGO, 'SOBREPASA EL VALOR LÍMITE PARA LA ASIGNACIÓN'); 
            END;
                
      OPEN CUR_PRODUCTO(V_CENTRO.CODIGO); --SE ABRE EL SEGUNDO CURSOR CON PARAMETROS
        LOOP --SE INICIA EL CICLO DEL SEGUNDO CURSOR 
          FETCH CUR_PRODUCTO INTO V_PRODUCTO; --SE CARGAN TODOS LOS DATOS DEL CURSOR A LA VARIABLE
          EXIT WHEN CUR_PRODUCTO%NOTFOUND; --CUANDO NO SE ENCUENTRAN DATOS, SE CIERRA EL CICLO
            
            --PRECIO COMPRA
            BEGIN
                --SE EXTRAE EL IVA SEGUN EL PAIS DE ORIGEN DE CADA PRODUCTO
                SELECT PORCENTAJE
                INTO V_PORCENTAJE_PAIS 
                FROM AUMENTO_PAIS
                WHERE CODIGO_PAIS = V_PRODUCTO.PAIS_ORIGEN;
                
                V_PRECIO_COMPRA_IVA := ROUND((V_PRODUCTO.PRECIO_COMPRA * 1.19));
                V_PORCENTAJE_PAIS := ROUND((V_PRECIO_COMPRA_IVA * V_PORCENTAJE_PAIS)/100);
                V_PRECIO_VENTA := ROUND(V_PRECIO_COMPRA_IVA + V_PORCENTAJE_PAIS);
                
              EXCEPTION
              --CUANDO NO EXISTAN DATOS ENTONCES SE EJECUTARA LA EXCEPCION Y SE INSERTARA EL ERROR EN LA TABLA DE ERRORES
                WHEN NO_DATA_FOUND THEN
                  V_PORCENTAJE_PAIS := 0;
                
                  INSERT INTO ERROR_PROCESO VALUES ( --SE INSERTARA EN LA TABLA DE ERRORES EN CASO DE QUE NO ENCUENTRE NINGUNO QUE COINCIDA
                    SEQ_ERROR_PROCESO.NEXTVAL,
                    'ERROR EN OBTENCIÓN DE PAÍS PARA PRODUCTO: ' || V_PRODUCTO.CODIGO, 'SU PAÍS NO CLASIFICA'); 
            END;
            
            --DESCUENTO SEGUN CANTIDAD VENDIDA POR CADA PRODUCTO 
              --SE EXTRAE LA CANTIDAD VENDIDA POR CADA PRODUCTO DURANTE ESTE MES
              SELECT SUM(DEV.CANTIDAD)
              INTO V_PROD_VENDIDOS
              FROM DETALLE_VENTA DEV
              JOIN VENTA VT ON  DEV.VENTA_ID_VENTA = VT.ID_VENTA
              WHERE DEV.PRODUCTO_CODIGO = V_PRODUCTO.CODIGO AND TO_CHAR(VT.FECHA_VENTA, 'MM') = :B_FECHA_MES
              GROUP BY DEV.PRODUCTO_CODIGO;
              
              --SE EXTRAE EL DESCUENTO SEGUN CANTIDAD
              SELECT DESCUENTO
              INTO V_DESC_OFERTA 
              FROM CANTIDAD_OFERTA
              WHERE CANT_MIN <= V_PROD_VENDIDOS AND CANT_MAX >= V_PROD_VENDIDOS; 
              
              --DESCUENTO
              V_DESC := ROUND((V_PRECIO_VENTA * V_DESC_OFERTA) / 100);
            
              --PRECIO CON DESCUENTO APLICADO
              V_PRECIO_OFERTA := ROUND(V_PRECIO_VENTA - V_DESC);
                      
              --STOCK + STOCK PROYECCION
              --SE EXTRAE LA PROYECCION QUE DEPENDE DEL STOCK ACTUAL
              SELECT PROYECCION
              INTO V_PROYECCION_STOCK
              FROM PROYECCION_STOCK
              WHERE CANT_MIN <= V_PRODUCTO.STOCK AND CANT_MAX >=V_PRODUCTO.STOCK;
              
              --STOCK TOTAL - SE SUMA LA PROYECCION MAS EL STOCK ACTUAL
              V_STOCK_PROYECCION := ROUND(V_PROYECCION_STOCK + V_PRODUCTO.STOCK);
              
              --PRECIO A PAGAR POR LA SOLICITUD DE STOCK (NO ESPECIFICA EL WORD DONDE SE DEBE INGRESAR ESTE VALOR)
              V_PRECIO_STOCK_PROY := ROUND(V_STOCK_PROYECCION * V_PRODUCTO.PRECIO_COMPRA);
              
              --PRODUCTO MAS VENDIDO
              --EXTRAE EL VALOR MAXIMO DE LA SUMA DE LAS CANTIDADES DE PRODUCTOS VENDIDOS
              SELECT MAX(TotalCantidad) KEEP (dense_rank last order by TotalCantidad)
              INTO V_MAS_VENDIDO
              FROM (
                SELECT SUM(cantidad) as  TotalCantidad
                FROM DETALLE_VENTA 
                GROUP BY PRODUCTO_CODIGO
              );
              
            --ADICION DEL 15% POR SER EL PRODUCTO MAS VENDIDO EN EL MES
             IF V_PROD_VENDIDOS = V_MAS_VENDIDO THEN
              --SI LA SUMA DE LA CANTIDAD DE PRODUCTOS VENDIDOS ES IGUAL 
              --A LA CANTIDAD MAXIMA DE PRODUCTO VENDIDO ENTONCES SE LE AGREGARA UN 15% AL VALOR DE VENTA
               V_ADICIONAL_VENDIDO:= ROUND((V_PRECIO_VENTA * :B_ADICION_15)/100);
               --PRECIO FINAL
               V_PRECIO_FINAL := ROUND(V_PRECIO_VENTA + V_ADICIONAL_VENDIDO); 
             ELSE
              V_ADICIONAL_VENDIDO := 0;
              V_PRECIO_FINAL := (V_PRECIO_VENTA);
             END IF;
   
          --SE INSERTAN LOS DATOS EN LA TABLA PRODUCTO_MENSUAL
          INSERT INTO PRODUCTO_MENSUAL VALUES (
            V_PRODUCTO.CODIGO,
            V_PRODUCTO.NOMBRE,
            V_CENTRO.CODIGO,
            :B_FECHA_MES,
            :B_FECHA_ANIO, 
            V_PRODUCTO.PRECIO_COMPRA,
            V_PRECIO_VENTA,
            V_PRECIO_OFERTA,
            V_PRODUCTO.STOCK,
            V_STOCK_PROYECCION,
            V_PRECIO_FINAL
          );

          END LOOP; --SE CIERRA EL LOOP DEL CURSOR PRODUCTO
        
        CLOSE CUR_PRODUCTO; --SE CIERRA EL CURSOR PRODUCTO
            
            --SE INSERTAN LOS DATOS EN LA TABLA CORRESPONDIENTE 
            INSERT INTO CENTRO_DISTRIBUCION_MENSUAL VALUES(
              V_CENTRO.CODIGO,   
              :B_FECHA_ANIO,
              :B_FECHA_MES,
              V_COSTO_OP,
              V_VALOR_AREA, 
              :B_ARRIENDO
            );
            
      END LOOP; --SE CIERRA EL LOOP DEL CURSOR CENTRO
      
    CLOSE CUR_CENTRO; --SE CIERRA EL CURSOR CENTRO
    
  EXCEPTION --EN CASO DE QUE NO SE ENCUENTRE NINGUNA INFORMACION DE AMBOS CURSORES SALDRA EL MENSAJE DE LA EXCEPCION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('SIN INFORMACIÓN'); 
  COMMIT;
END;


select * from CENTRO_DISTRIBUCION_MENSUAL;
select * from PRODUCTO_MENSUAL;